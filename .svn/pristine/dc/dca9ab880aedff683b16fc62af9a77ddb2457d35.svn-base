package ssm.controller.driverSchool;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import ssm.entity.common.RecordsO;
import ssm.entity.common.ResultO;
import ssm.entity.driverSchool.SchoolPlaceO;
import ssm.entity.user.UserO;
import ssm.service.driverSchoolService.DriverSchoolPlaceService;

@Controller
@RequestMapping(value="/driverSchoolPlace")
public class DriverSchoolPlaceAction {
	

	@Autowired
	private DriverSchoolPlaceService driverSchoolPlaceService;
	/**
	 * 获取驾校场地信息列表
	 * @author heyi
	 * 2016/4/2
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/getDriverSchoolPlaceList/{currentPage}/{pageSize}",method=RequestMethod.POST,produces="application/json",
			consumes="application/json")
	public ResultO<SchoolPlaceO> getDriverSchoolPlaceList(@RequestBody SchoolPlaceO schoolPlaceO,@PathVariable int currentPage,
			@PathVariable int pageSize,HttpSession session)throws Exception{
		UserO user=(UserO) session.getAttribute("userInfo");
		String leader=user.getLeader();
		ResultO<SchoolPlaceO> list = driverSchoolPlaceService.getDriverSchoolPlaceList(schoolPlaceO,currentPage,pageSize,leader);
		return list;
		
	}
	
	
	/**
	 * 按驾校名称获取驾校场地信息列表
	 * @author heyi
	 * 2016/4/3
	 */
	@ResponseBody
	@RequestMapping(value="/getSchoolPlace",method=RequestMethod.GET,produces="application/json",consumes="application/json")
	public Map<String,Object> getSchoolPlace(HttpSession session){
		UserO user=(UserO) session.getAttribute("userInfo");
		Map<String,Object> map=new HashMap<String,Object>();
		String leader =user.getLeader();
		List<SchoolPlaceO> places =driverSchoolPlaceService.getSchoolPlace( leader);
		map.put("places",places);
		map.put("item", leader);
		return map;
		
	}
	
	
	/**
	 * 保存所有驾校场地信息
	 * @author heyi
	 * 2016/4/2
	 * @param recordsO
	 * @param session
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/saveAll",method=RequestMethod.POST,produces="application/json",consumes="application/json")
	public Map<String,Object> saveAll(@RequestBody RecordsO<SchoolPlaceO> recordsO,HttpSession session){
		
		Map<String,Object> resultMap =new HashMap<>();
		UserO user =(UserO)session.getAttribute("userInfo");
		String account =user.getAccount();
		String leader=user.getLeader();
		List<SchoolPlaceO> insertedRecords =recordsO.getInsertedRecords();
		List<SchoolPlaceO> uptatedRecords =recordsO.getUpdatedRecords();
		List<SchoolPlaceO> deletedRecords=recordsO.getDeletedRecords();
		List<SchoolPlaceO> insertedList= new ArrayList<>();
		List<SchoolPlaceO> updatedList=new ArrayList<>();
		List<SchoolPlaceO> deletedList=new ArrayList<>();
		//批量新增数据
		if(insertedRecords!=null&&insertedRecords.size()>0){
			for(SchoolPlaceO s:insertedRecords){
				s.setArea(s.getArea());
				s.setCarNo(s.getCarNo());
				s.setCreatedBy(account);
				s.setCreatedDate(new Date());
				s.setLastUpdatedBy(account);
				s.setLastUpdatedDate(new Date());
				s.setPic1(getValue(s.getPic1()));
				s.setPic2(getValue(s.getPic2()));
				s.setPic3(getValue(s.getPic3()));
				s.setPic4(getValue(s.getPic4()));
				s.setPic5(getValue(s.getPic5()));
				s.setPlaceName(getValue(s.getPlaceName()));
				s.setPosition(getValue(s.getPosition()));
				s.setRemark(getValue(s.getRemark()));
				s.setSchoolAccount(leader);
				insertedList.add(s);
			}
			
			if(insertedList.size()>0){
				List<String> insertResult =driverSchoolPlaceService.batchInsert(insertedList);
				if(insertResult!=null && insertResult.size()>0){
				resultMap.put("result", insertResult);
			     return resultMap;
			}
			}
		}
		
		/**
		 * 批量修改驾校场地信息
		 * @author heyi
		 * 2016/4/2
		 */
		if(uptatedRecords!=null&&uptatedRecords.size()>0){
			for(SchoolPlaceO s:uptatedRecords){
				s.setId(s.getId());
				s.setArea(s.getArea());
				s.setCarNo(s.getCarNo());
				s.setLastUpdatedBy(account);
				s.setLastUpdatedDate(new Date());
				s.setPic1(getValue(s.getPic1()));
				s.setPic2(getValue(s.getPic2()));
				s.setPic3(getValue(s.getPic3()));
				s.setPic4(getValue(s.getPic4()));
				s.setPic5(getValue(s.getPic5()));
				s.setPlaceName(getValue(s.getPlaceName()));
				s.setPosition(getValue(s.getPosition()));
				s.setRemark(getValue(s.getRemark()));
				updatedList.add(s);
			}
			if(updatedList.size()>0){
				List<String> updateResult =driverSchoolPlaceService.batchUpdate(updatedList);
				if(updateResult!=null&&updateResult.size()>0){
					resultMap.put("result", updateResult);
					return resultMap;
				}
			}
		
		}
		//批量删除驾校场地信息
		if(deletedRecords!=null&&deletedRecords.size()>0){
			for(SchoolPlaceO s:deletedRecords){
				s.setArea(s.getArea());
				s.setCarNo(s.getCarNo());
				s.setLastUpdatedBy(account);
				s.setLastUpdatedDate(new Date());
				s.setPic1(getValue(s.getPic1()));
				s.setPic2(getValue(s.getPic2()));
				s.setPic3(getValue(s.getPic3()));
				s.setPic4(getValue(s.getPic4()));
				s.setPic5(getValue(s.getPic5()));
				s.setPlaceName(getValue(s.getPlaceName()));
				s.setPosition(getValue(s.getPosition()));
				s.setRemark(getValue(s.getRemark()));
				s.setSchoolAccount(leader);
				deletedList.add(s);
			}
			if(deletedList.size()>0){
			 driverSchoolPlaceService.batchDelete(deletedList);
			}
		}
	
		return resultMap;
		
	}	
	/**
	 * 添加新场地 
	 * liaoyun
	 * 2016-4-4
	 */
	@ResponseBody
	@RequestMapping(value="/addNewPlace")
	public void addNewPlace(MultipartHttpServletRequest request,HttpServletResponse response,
			HttpSession session) throws Exception{
		SchoolPlaceO schoolPlaceO = new SchoolPlaceO();
		UserO user =(UserO)session.getAttribute("userInfo");
		String account="";
		if(user.getType()==4){//如果是驾校的职员
			account = user.getLeader();
		}else if(user.getType()==3){//如果是驾校的管理员
			account = user.getAccount();
		}
		try{
			String placeName = request.getParameter("placeName");
			String area = request.getParameter("area");
			String carNo = request.getParameter("carNo");
			String remark = request.getParameter("remark");
			String position = request.getParameter("position");
			
			schoolPlaceO.setPlaceName(placeName);
			schoolPlaceO.setArea(Double.parseDouble(area));
			schoolPlaceO.setCarNo(Integer.parseInt(carNo));
			schoolPlaceO.setRemark(remark);
			schoolPlaceO.setPosition(position);
			schoolPlaceO.setSchoolAccount(account);
			schoolPlaceO.setCreatedBy(user.getAccount());
			schoolPlaceO.setLastUpdatedBy(user.getAccount());
			
			//获取 文件 map
			Map<String,MultipartFile> fileMap = request.getFileMap();
			//得到 map 的 key值
			Set<String> fileSet = fileMap.keySet();
			//创建 迭代器
			Iterator<String> fileNameIterator = fileSet.iterator();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddhhmmss");
			int i=1;
			while(fileNameIterator.hasNext()){
				// input 中的 name 属性 的 名称
				String uploadFileName = fileNameIterator.next();
				MultipartFile file = fileMap.get(uploadFileName);
				if(file.getSize()>0){
					//上传的文件 的名字如：kk.jpg
					String origFileName = file.getOriginalFilename();
					//得到文件的 流
					InputStream isRef = file.getInputStream();
					//保存文件的路径
					String dir = request.getSession().getServletContext().getRealPath("/file/pic");
					System.out.println(dir);
					char lastChar = dir.charAt(dir.length()-1);
					if(lastChar!='\\' && lastChar!='/'){
						dir=dir+"/";
					}
					//获取图片后缀
					int pos = origFileName.lastIndexOf(".");
					String suffix = origFileName.substring(pos, origFileName.length());
					Date date = new Date();
					//文件取别名，防止同名
					String newName = sdf.format(date)+i+suffix;
					i++;
					//新文件全路径
					File targetFile = new File(dir,newName);
					//文件输出流
					FileOutputStream fosRef = new FileOutputStream(targetFile);
					//保存文件到文件夹
					IOUtils.copy(isRef, fosRef);
					if(uploadFileName.equals("pic1")){
						schoolPlaceO.setPic1(newName);
					}else if(uploadFileName.equals("pic2")){
						schoolPlaceO.setPic2(newName);
					}else if(uploadFileName.equals("pic3")){
						schoolPlaceO.setPic3(newName);
					}else if(uploadFileName.equals("pic4")){
						schoolPlaceO.setPic4(newName);
					}else if(uploadFileName.equals("pic5")){
						schoolPlaceO.setPic5(newName);
					}
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		//将数据保存到数据库
		driverSchoolPlaceService.saveNewPlace(schoolPlaceO);
		response.setContentType("text/html;charset='utf-8'");
		response.setCharacterEncoding("utf-8");
		response.setHeader("Cache-Control", "no-cache");
//		Writer output = response.getWriter();
//		response.setHeader("content-type", "text/html;charset=utf-8");
//		String data = "<scrip>alert('sssssss')</script>";
//		byte[] b=data.getBytes("utf-8");
//		output.write("<script language='javascript'>alert('添加成功')</script>");
	}
	/**
	 * 修改场地信息
	 * liaoyun 2016-4-4
	 */
	@ResponseBody
	@RequestMapping(value="/updatePlace")
	public void updatePlace(MultipartHttpServletRequest request,HttpServletResponse response,
			HttpSession session){
		UserO user =(UserO)session.getAttribute("userInfo");
		String account="";
		if(user.getType()==4){//如果是驾校的职员
			account = user.getLeader();
		}else if(user.getType()==3){//如果是驾校的管理员
			account = user.getAccount();
		}
		String id = request.getParameter("id");
		SchoolPlaceO place = driverSchoolPlaceService.findPlaceDataById(id,account);
		try{
			String placeName = request.getParameter("placeName");
			String area = request.getParameter("area");
			String carNo = request.getParameter("carNo");
			String remark = request.getParameter("remark");
			String position = request.getParameter("position");
			
			place.setPlaceName(placeName);
			place.setArea(Double.parseDouble(area));
			place.setCarNo(Integer.parseInt(carNo));
			place.setRemark(remark);
			place.setPosition(position);
			place.setLastUpdatedBy(user.getAccount());
			
			//获取 文件 map
			Map<String,MultipartFile> fileMap = request.getFileMap();
			//得到 map 的 key值
			Set<String> fileSet = fileMap.keySet();
			//创建 迭代器
			Iterator<String> fileNameIterator = fileSet.iterator();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddhhmmss");
			//根路径
			String dir = request.getSession().getServletContext().getRealPath("/file/pic");
			char lastChar = dir.charAt(dir.length()-1);
			if(lastChar!='\\' && lastChar!='/'){
				dir=dir+"/";
			}
			int i=1;
			while(fileNameIterator.hasNext()){
				// input 中的 name 属性 的 名称
				String uploadFileName = fileNameIterator.next();
				MultipartFile file = fileMap.get(uploadFileName);
				if(file.getSize()>0){//如果不为空,删除原来的图片  ， 存入新的图片
					//上传的文件 的名字如：kk.jpg
					String origFileName = file.getOriginalFilename();
					//得到文件的 流
					InputStream isRef = file.getInputStream();
					//获取图片后缀
					int pos = origFileName.lastIndexOf(".");
					String suffix = origFileName.substring(pos, origFileName.length());
					Date date = new Date();
					//文件取别名，防止同名
					String newName = sdf.format(date)+i+suffix;
					i++;
					if(uploadFileName.equals("pic1")){
						//如果文件存在，则删除
						if(place.getPic1()!=null && !place.getPic1().equals("")){
							File deletedPic = new File(dir,place.getPic1());
							deletedPic.delete();
						}
						//保存新的文件
						File targetFile = new File(dir,newName);
						//文件输出流
						FileOutputStream fosRef = new FileOutputStream(targetFile);
						//保存文件到文件夹
						IOUtils.copy(isRef, fosRef);
						place.setPic1(newName);
					}else if(uploadFileName.equals("pic2")){
						//如果文件存在，则删除
						if(place.getPic2()!=null && !place.getPic2().equals("")){
							File deletedPic = new File(dir,place.getPic2());
							deletedPic.delete();
						}
						//保存新的文件
						File targetFile = new File(dir,newName);
						//文件输出流
						FileOutputStream fosRef = new FileOutputStream(targetFile);
						//保存文件到文件夹
						IOUtils.copy(isRef, fosRef);
						place.setPic2(newName);
					}else if(uploadFileName.equals("pic3")){
						//如果文件存在，则删除
						if(place.getPic3()!=null && !place.getPic3().equals("")){
							File deletedPic = new File(dir,place.getPic3());
							deletedPic.delete();
						}
						//保存新的文件
						File targetFile = new File(dir,newName);
						//文件输出流
						FileOutputStream fosRef = new FileOutputStream(targetFile);
						//保存文件到文件夹
						IOUtils.copy(isRef, fosRef);
						place.setPic3(newName);
					}else if(uploadFileName.equals("pic4")){
						//如果文件存在，则删除
						if(place.getPic4()!=null && !place.getPic4().equals("")){
							File deletedPic = new File(dir,place.getPic4());
							deletedPic.delete();
						}
						//保存新的文件
						File targetFile = new File(dir,newName);
						//文件输出流
						FileOutputStream fosRef = new FileOutputStream(targetFile);
						//保存文件到文件夹
						IOUtils.copy(isRef, fosRef);
						place.setPic4(newName);
					}else if(uploadFileName.equals("pic5")){
						//如果文件存在，则删除
						if(place.getPic5()!=null && !place.getPic5().equals("")){
							File deletedPic = new File(dir,place.getPic5());
							deletedPic.delete();
						}
						//保存新的文件
						File targetFile = new File(dir,newName);
						//文件输出流
						FileOutputStream fosRef = new FileOutputStream(targetFile);
						//保存文件到文件夹
						IOUtils.copy(isRef, fosRef);
						place.setPic5(newName);
					}
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		//保存入数据库
		driverSchoolPlaceService.saveUpdatedPlace(place);
	}
	private String getValue(String s){
		if(s==null||s.equals("")){
			return "";
		}
		return s.trim();
	}
}
