package ssm.serviceImpl.driverSchoolServiceImpl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import ssm.entity.common.PageO;
import ssm.entity.common.ResultO;
import ssm.entity.driverSchool.SchoolAdO;
import ssm.entity.driverSchool.SchoolInstructorO;
import ssm.entity.driverSchool.SchoolO;
import ssm.orm.driverSchool.DriverSchoolDao;
import ssm.service.driverSchoolService.DriverSchoolService;
import ssm.util.PageUtil;
@Service
public class DriverSchoolServiceImpl implements DriverSchoolService {

	@Autowired
	private DriverSchoolDao driverSchoolDao;
	
	/**
	 * 查询驾校信息
	 * heyi 
	 * 2016/3/22
	 */
	@Override
	public ResultO<SchoolO> getDriverSchoolList(SchoolO schoolO,int currentPage,int pageSize){
		int totalNum=driverSchoolDao.getDriverSchoolListTotal(schoolO);
		PageO pageO= PageUtil.getPage(currentPage, pageSize, totalNum);
		int start = (pageO.getCurrentPage()-1)*pageO.getPageSize();
		List<SchoolO> list =driverSchoolDao.getDriverSchoolList(schoolO,start,pageSize);
		ResultO<SchoolO> result = new ResultO<>();
		result.setResultList(list);
		result.setPage(pageO);
		return result;
		
	}
	
	/**
	 * 批量插入数据
	 * heyi
	 * 2016/3/22
	 */
	@Override
	public Map<String, String> batchInsert(List<SchoolO> insertedList) {
		Map<String,String> map =new HashMap<>();
		//判断重复
		List<String> accountList= new ArrayList<>();
		for(SchoolO o:insertedList){
			accountList.add(o.getAccount());
		}
		List<String> repeatedAccountList=driverSchoolDao.findRepeatedByAccount(accountList);
		driverSchoolDao.batchInsert(insertedList);
		return map;
	}

	
	/**
	 * 批量修改数据
	 * heyi
	 * 2016/3/22
	 */
	@Override
	public Map<String, String> batchUpdate(List<SchoolO> updatedList) {
       Map<String,String> map=new HashMap<>();
       List<String> accountList= new ArrayList<>();
		for(SchoolO o:updatedList){
			accountList.add(o.getAccount());
		}
		List<String> repeatedAccountList=driverSchoolDao.findRepeatedByAccount(accountList);
		driverSchoolDao.batchUpdate(updatedList);
		return map;
	}

	/**
	 * 批量删除数据
	 * heyi
	 * 2016/3/22
	 */
	@Override
	public void batchDelete(List<SchoolO> deletedList) {

	driverSchoolDao.batchDelete(deletedList);
	}

	/**
	 * 获取自己驾校信息 liaoyun 2016-3-27
	 * @param account
	 * @return
	 */
	@Override
	public SchoolO getDriverSchoolMsg(String account) {
		List<SchoolO> list = driverSchoolDao.findDriverSchoolMsg(account);
		return list.get(0);
	}

	/**
	 * 保存修改的驾校信息数据 liaoyun 2016-3-27
	 * @param school
	 * @param account
	 */
	@Override
	public void saveSchoolMsg(SchoolO school, String account) {
		driverSchoolDao.saveSchoolMsg(school,account);
	}

	/**
	 * 查询 驾校 所属的 教练 liaoyun 2016-3-27
	 */
	@Override
	public ResultO<SchoolInstructorO> getDriverSchoolList(SchoolInstructorO schoolInstructorO, int currentPage,
			int pageSize, String account) {
		int totalNum=driverSchoolDao.getDriverInstructorListTotal(schoolInstructorO,account);
		PageO pageO= PageUtil.getPage(currentPage, pageSize, totalNum);
		int start = (pageO.getCurrentPage()-1)*pageO.getPageSize();
		List<SchoolInstructorO> list =driverSchoolDao.getDriverInstructorList(schoolInstructorO,start,pageSize,account);
		ResultO<SchoolInstructorO> result = new ResultO<>();
		result.setResultList(list);
		result.setPage(pageO);
		return result;
	}

	/**
	 * 新增  驾校的教练 liaoyun 2016-3-27
	 * @param insertedRecords
	 */
	@Override
	public void insertSchoolInstructor(List<SchoolInstructorO> insertedRecords,String account) {
		driverSchoolDao.insertSchoolInstructor(insertedRecords,account);
	}

	/**
	 * 修改  驾校的教练 liaoyun 2016-3-27
	 * @param uptatedRecords
	 */
	@Override
	public void updateSchoolInstructor(List<SchoolInstructorO> uptatedRecords,String account) {
		driverSchoolDao.updateSchoolInstructor(uptatedRecords,account);
	}

	/**
	 * 剔除  驾校的教练 liaoyun 2016-3-27
	 * @param deletedRecords
	 */
	@Override
	public void deleteSchoolInstructor(List<SchoolInstructorO> deletedRecords,String account) {
		driverSchoolDao.deleteSchoolInstructor(deletedRecords,account);
	}

	/**
	 * 广告数据存入数据库
	 * liaoyun 2016-4-2
	 * @param schoolAd
	 * @param account
	 */
	@Override
	public void saveAdInfo(SchoolAdO schoolAd, String account) {
		driverSchoolDao.saveAdInfo(schoolAd, account);
	}
}
